Mais tipos: structs, slices, e maps
Aprenda como definir tipos baseado nos existentes: esta lição cobre estruturas, matrizes, slices e maps.

Os Autores de Go
http://golang.org

* Ponteiros

Go tem ponteiros.
Um ponteiro guarda na memória o endereço de uma variável.

O tipo `*T` é um ponteiro para um valor `T`. Seu valor zero é `nil`.

	var p *int

O operador `&` gera um ponteiro para seu operando.

	i := 42
	p = &i

O operador `*` indica valor subjacente do ponteiro.

	fmt.Println(*p) // lê i através do ponteiro p
	*p = 21         // defina i através do ponteiro p

Isto é conhecido como "desreferenciamento" ou "indirecionamento".

Diferente de C, Go não faz aritimética de ponteiros.

.play moretypes/pointers.go

* Structs

A `struct` é uma coleção de campos.

.play moretypes/structs.go

* Campos Struct

Campos Struct são acessados ​​através de um ponto.

.play moretypes/struct-fields.go

* Ponteiros para structs

Campos de estruturas podem ser acessados através de um ponteiro de estrutura.

Para acessar o campo `X` de uma struct quando tivermos o ponteiro `p` da struct podemos escrever `(*p).X`. No entanto, essa notação é incômoda, então a linguagem nos permite escrever apenas `p.X`, sem a referência explícita.

.play moretypes/struct-pointers.go

* Struct literais

A struct literal indica um valor struct recém-alocado, ao enumerar os valores de seus campos.

Você pode listar apenas um subconjunto de campos usando o `Name:` sintaxe. (E a ordem dos campos nomeados é irrelevante.)

O prefixo especial `&` constrói um ponteiro para uma struct literal.

.play moretypes/struct-literals.go

* Matrizes

O tipo `[n]T` é uma matriz de `n` valor do tipo `T`.

A expressão

	var a [10]int

declara a variável `a` com uma matriz de dez inteiros.

O tamanho da matriz é parte de seu tipo, logo, matrizes não podem ser redimensionadas.
Isso parece uma limitação, mas não se preocupe;
Go dispõe de uma maneira conveniente para trabalhar com matrizes.

.play moretypes/array.go

* Slices

Uma matriz tem um tamanho fixo.
Uma slice, por outro lado, é dinamicamente redimensionada,
uma visão flexível dos elementos de uma matriz.
Na prática, as slices são muito mais comuns do que as matrizes.

O tipo `[]T` é uma slice com elementos do tipo `T`.

Uma slice é formada pela especificação de dois indices, um limite menor e
maior, separados por dois pontos:

	a[low : high]

Este seleciona um intervalo meio-aberto que inclui o primeiro
elemento, mas exclui o último.

A expressão a seguir cria uma slice que inclui
os elementos de 1 à 3 de `a`:

	a[1:4]

.play moretypes/slices.go


* Slices são como referências para matrizes

Uma slice não armazena todos os dados,
apenas descreve uma seção de uma matriz subjacente.

Alterando os elementos de uma slice modifica os
elementos correspondentes da sua matriz subjacente.

Outras slices que partilham a mesma matriz subjacente vão ver essas mudanças.

.play moretypes/slices-pointers.go


* Slices literais

Uma slice literal é como um array literal, sem o comprimento.

Esta é uma matriz literal:

	[3]bool{true, true, false}

E isso cria a mesma matriz como acima,
em seguida, constrói uma slice que faz referência a ela:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Padrões de uma Slice

Ao "fatiar", você pode omitir as posições de limite altas ou baixas para usar seus padrões em seu lugar.

O padrão é igual a zero para o limite baixo e o comprimento da slice para o limite alto.

Para a matriz

	var a [10]int

essas expressões das slices são equivalentes:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


*  Tamanho e capacidade de uma Slice

Uma slice tem tanto um _tamanho_ quanto uma _capacidade_.

O comprimento de uma slice é o número de elementos que ela contém.

A capacidade de uma slice é o número de elementos na matriz subjacente,
contando a partir do primeiro elemento na slice.

O comprimento e a capacidade de uma slice `S` podem ser obtidos utilizando as expressões
`len(s)` e `cap(s)`.

Você pode estender o comprimento de uma slice "refatiando-a",
desde que tenha capacidade suficiente.
Tente alterar uma das operações da slice no programa de exemplo para estendê-la
além de sua capacidade e veja o que acontece.

.play moretypes/slice-len-cap.go

* Slices nulas

O valor zero de uma slice é `nil`.

Uma slice nula tem o comprimento e a capacidade igual 0.

.play moretypes/nil-slices.go

* Criando uma slice com make

As slices podem ser criadas com a função make.
Com ela você pode criar matrizes dinamicamente.

A função `make` aloca uma matriz zerada
e retorna uma slice que se refere a essa matriz:

	a := make([]int, 5)  // len(a)=5

Para especificar a capacidade, passe o terceiro argumento no `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices de slices

As slices podem conter qualquer tipo, incluindo outras slices.

.play moretypes/slices-of-slice.go

* Adicionando elementos em uma slice

É comum acrescentar novos elementos em uma slice, então Go dispõe de uma função
padrão para isso o `append`. A [[http://golang.org/pkg/builtin/#append][documentação]]
do pacote padrão descreve melhor o `append`.

	func append(s []T, vs ...T) []T

O primeiro parâmetro `s` do `append` é uma slice do tipo `T`, e o resto são valores de `T`
para acrescentar na slice.

O valor resultante do `append` é uma slice contendo todos os elementos da slice
original mais os valores providos.

Se a matriz anterior de `s` for muito pequena para caber todos os valores uma matriz
gigante será alocada. A slice retornada apontará para a nova matriz alocada.

(Para aprender mais sobre slices, leia o artigo [[http://golang.org/doc/articles/slices_usage_and_internals.html][Slices: usage and internals]].)

.play moretypes/append.go

* Range

O `range` do laço `for` itera sobre uma slice ou map.

Ao variar sobre uma slice, dois valores são retornados para cada iteração. O primeiro é o índice, o segundo uma cópia do elemento daquele índice.

.play moretypes/range.go

* Range continuação

Você pode ignorar o índice ou valor, atribuindo o `_`.

Se você só quiser o índice, deixe inteiramente sem o  ", value".

.play moretypes/range-continued.go

* Exercício: Slices

Implemente `Pic`. Ela deve retornar uma slice de comprimento `dy`, cada elemento do qual é uma slice de `dx` 8-bit inteiros sem sinal. Quando você executa o programa, ele irá exibir a sua imagem, interpretando os números inteiros como escala dos valores de cinza (bem, bluescale).

A escolha da imagem é com você. Funções interessantes incluem `x^y`, `(x+y)/2`, e `x*y`.

(Você precisa usar um loop para alocar cada `[]uint8` dentro do `[][]uint8`.)

(Utilize `uint8(intValue)` para converter entre os tipos.)

.play moretypes/exercise-slices.go

* Maps

Um map mapeia chaves para valores.

O valor zero de um map é `nil`. Um map `nil` não tem chaves, nem chaves podem ser adicionadas.

A função `make` retorna um map com um tipo determinado, inicializado e pronto para o uso.

.play moretypes/maps.go

* Maps literais

Maps literais são como structs literais, mas as chaves são obrigatórias.

.play moretypes/map-literals.go

* Maps literais continuação

Se o tipo de nível superior é apenas um nome do tipo, você pode omiti-lo a partir dos elementos do literal.

.play moretypes/map-literals-continued.go

* Mutação de Maps

Inserir ou atualizar um elemento no map `m`:

	m[key] = elem

Recuperar um elemento:

	elem = m[key]

Excluir um elemento:

	delete(m, key)

Teste que uma chave está presente com dois valores:

	elem, ok = m[key]

Se `key` está em `m`, `ok` é `true`. Se não, `ok` é `false`.

Se `key` não está no map então  `elem` tem valor zero para o elemento do tipo do map.

_Nota_: Se `elem` ou `ok` não foi declarado ainda você pode usar esta forma de declaração curta:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Exercício: Maps

Implementar `WordCount`. Ele deve retornar um map das contagens de cada "word" na string `s`. A função `wc.Test` executa um conjunto de testes contra a função fornecida e imprime o sucesso ou falha.

Você pode achar [[http://golang.org/pkg/strings/#Fields][strings.Fields]] útil.

.play moretypes/exercise-maps.go

* Funções valores

Funções são valores também. Elas podem ser passadas  assim como outros valores.

Funções valores podem ser usadas como argumentos de funções e retornar valores.

.play moretypes/function-values.go

* Funções closures

As funções Go podem ser closures. Um closure é uma função valor que referencia variáveis
de fora de seu corpo. A função pode acessar e atribuir nas variáveis referenciadas; nesse sentido
a função é "limitada" às variáveis.

Por exemplo, a função `adder` retorna um closure. Cada closure limita sua própria variável `sum`.

.play moretypes/function-closures.go

* Exercício: Fibonacci closure

Vamos nos divertir um pouco com as funções.

Implemente uma função `fibonacci` que retorna uma função (um closure) que retorna [[https://pt.wikipedia.org/wiki/N%C3%BAmero_de_Fibonacci][números sucessivos de Fibonacci]] (0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Parabéns!

Você terminou esta lição!

Você pode voltar para lista de [[/list][módulos]] para achar o que aprender em seguida, ou continuar com a [[javascript:click('.next-page')][próxima lição]].
