Estruturas de controle de fluxo: for, if, else e switch
Aprenda como controlar o fluxo do seu código com condicionais, loops, e switches.

Os autores de Go
http://golang.org

* For

Go tem apenas uma estrutura de laço, o `for`.

O laço `for` básico tem três componentes separados por ponto e vírgula:

- a instrução inicial: executada antes da primeira iteração
- a expressão de condição: avaliada antes de cada iteração
- a pós-instrução: executado no final de cada iteração

A instrução inicial será freqüentemente uma declaração de variável curta, e
variáveis declaradas são visíveis apenas no escopo da declaração do `for`.

O loop irá parar de iterar quando a condição booleana for avaliada como 'false'.

_Nota_: Ao contrário de outras linguagens como C, Java ou JavaScript, não há parênteses
rodeando os três componentes da declaração `for` e as chaves `{`}` são sempre necessárias.

.play flowcontrol/for.go

* For (continuação)

A instrução inicial e a pós-instrução são opcionais.

.play flowcontrol/for-continued.go

* For é o "while" de Go

Nesse ponto, você pode tirar as vírgulas: o `while` do C é escrito com `for` em Go.

.play flowcontrol/for-is-gos-while.go

* Para sempre (Forever)

Se você omitir a condição do laço, ele executará para sempre, e assim um loop infinito é compactadamente expresso.

.play flowcontrol/forever.go

* If

A declaração `if` parece com os laços `for`; a expressão não precisa ser cercada de `(`)` mas os chaves `{`}` são obrigatórios.

.play flowcontrol/if.go

* If com uma curta declaração

Como o `for`, a instrução `if` pode começar com uma breve declaração antes de executar a condição.

Variáveis ​​declaradas pela instrução são válidas somente no escopo até o final do `if`.

(Tente usar `v` na última instrução `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If e else

Variáveis ​​declaradas dentro de uma instrução `if` curta também estão disponíveis dentro dos blocos `else`.

(Ambas as chamadas `pow` são executadas e retornam antes da chamada `fmt.Println` no começo do `main`.)

.play flowcontrol/if-and-else.go

* Exercício: Laços e Funções

Como forma de brincar com funções e loops, vamos implementar uma função de raiz quadrada: dado um número x, queremos encontrar o número z para o qual z² é quase o x.

Os computadores normalmente calculam a raiz quadrada de x usando um loop.
Começando com algumas suposições z, podemos ajustar z com base em quão perto z² é x,
produzindo uma melhor aproximação:

	z - = (z * z - x) / (2 * z)

Repetir este ajuste faz com que a aproximação seja cada vez melhor 
até chegarmos a uma resposta tão próxima da raiz quadrada quanto possível.

Implemente isto na `func`Sqrt` fornecida.
Um palpite inicial aceitável para z é 1, não importa qual seja a entrada.
Para começar, repita o cálculo 10 vezes e imprima cada z ao longo do caminho.
Veja como você chega perto da resposta para vários valores de x (1, 2, 3, ...)
e com que rapidez a aproximação melhora.

Dica: para declarar e inicializar um valor de ponto flutuante,
dê a ela uma sintaxe de ponto flutuante ou use uma conversão:

	z: = 1.0
	z: = float64 (1)

Em seguida, altere a condição de loop para parar quando o valor for interrompido
mudando (ou apenas muda em uma quantidade muito pequena).
Veja se isso é mais ou menos de 10 iterações.
Tente outras estimativas iniciais para z, como x ou x/2.
Quão perto estão os resultados da sua função para o [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] da biblioteca padrão?

(Nota: Se você está interessado nos detalhes do algoritmo, o z² - x acima
é o quão longe z² é de onde ele precisa ser (x), e a divisão por 2z é o derivado
de z², para dimensionar o quanto ajustamos z pela rapidez com que z² está mudando.
Essa abordagem geral é chamada de [[https://pt.wikipedia.org/wiki/M%C3%A9todo_de_Newton-Raphson][método de Newton]].
Ele funciona bem para muitas funções, mas especialmente bem para a raiz quadrada.)

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Uma instrução `switch` é uma forma mais curta de escrever uma sequência de declarações `if`-`else`.
Ele executa o primeiro caso cujo valor é igual à expressão de condição.

O switch do Go é como o do C, C ++, Java, JavaScript e PHP,
exceto que o Go apenas executa o caso selecionado, não todos os casos que seguem.
De fato, a declaração `break` que é necessária no final de cada caso naquelas
linguagens é fornecido automaticamente no Go.
Outra diferença importante é que os cases dos switchs do Go não precisam
ser constantes, e os valores envolvidos não precisam ser inteiros.

.play flowcontrol/switch.go

* Switch com ordem de avaliação

Switch cases avaliam casos de cima para baixo, parando quando um caso for bem-sucedido.

(Por exemplo,

	switch i {
	case 0:
	case f():
	}

não chamar `f` se `i==0`.)

#appengine: *Nota:* A data e hora no playground Go sempre aparece para começar às
#appengine: 2009-11-10 23:00:00 UTC, um valor cujo significado é deixado como um
#appengine: exercício para o leitor.

.play flowcontrol/switch-evaluation-order.go

* Switch sem condição

Switch sem uma condição é o mesmo que `switch`true`.

Essa estrutura pode ser uma maneira limpa para escrever longas cadeias if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer

A declaração defer adia a execução de uma função até o final do retorno da função.

Os argumentos das chamadas adiadas são avaliados imediatamente, mas a função chamada
não é executada até o retorno da função.

.play flowcontrol/defer.go

* Empilhando defers

Chamadas de funções adiadas são empurradas por uma pilha. Quando a função retorna,
as chamadas de adiamento são executadas na ordem em que a última a entrar é a primeira
a sair.

Para aprender mais sobre a declaração defer leia este
[[http://blog.golang.org/defer-panic-and-recover][blog post]].

.play flowcontrol/defer-multi.go

* Parabéns!

Você terminou esta lição!

Você pode voltar para lista de [[/list][módulos]] para achar o que aprender em seguida, ou continuar com a [[javascript:click('.next-page')][próxima lição]].
