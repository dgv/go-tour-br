Métodos e interfaces
Esta lição cobre métodos e interfaces, construções que definem objetos e seus comportamentos.

Os Autores de Go
http://golang.org

* Métodos

Go não tem classes. 
No entanto, você pode definir métodos em tipos.

O método é uma função com um argumento _receptor_  especial.

O receptor aparece em sua lista de argumentos entre a própria palavra-chave `func` e o nome do método.

Neste exemplo, o método `Abs` tem um receptor do tipo `Vertex` chamado `v`.

.play methods/methods.go

* Métodos são funções

Lembre-se: um método é apenas uma função com um argumento receptor.

Aqui está `Abs` escrito como uma função regular, sem qualquer alteração na funcionalidade.

.play methods/methods-funcs.go

* Métodos continuação

Você pode declarar um método em tipos que não são struct também.

Neste exemplo, vemos um tipo numérico `MyFloat` com um método `Abs`.

Só pode declarar um método com um receptor cujo tipo é definido no mesmo 
pacote como o método.
Você não pode declarar um método com um receptor cujo tipo é definido em outro
pacote (o qual inclui os tipos padrões tais como `int`).

.play methods/methods-continued.go

* Ponteiro receptor 

Você pode declarar métodos com ponteiro receptor.

Isso significa que o tipo de receptor tem a sintaxe literal `*t` por algum tipo `t`.
(Além disso, `t` não pode ser ele próprio, um ponteiro como `*int`.)

Por exemplo, o método `Scale` aqui é definido no `*Vertex`.

Métodos com ponteiro receptores pode modificar o valor ao qual o receptor
Os pontos (como `Scale` faz aqui).
Desde métodos muitas vezes precisam modificar seu receptor, receptores de ponteiro são mais comuns do que receptores de valor.

Tente remover o `*` a partir da declaração da função `Scale` na linha 16
e observar como o comportamento do programa muda.

Com um receptor de valor, o método `Scale` opera sobre uma cópia do original
`Valor Vertex`.
(Este é o mesmo comportamento para qualquer outro argumento da função.)
O método `Scale` deve ter um receptor ponteiro para mudar o `valor Vertex`
declarados na função `main`.

.play methods/methods-pointers.go

* Ponteiros e funções

Aqui vemos os métodos da `Scale` e `Abs` reescritos como funções.

Mais uma vez, tente remover o `*` a partir da linha 16.
Você pode ver porque as mudanças de comportamento ocorrem?
O que mais você precisa mudar para o exemplo compilar?

(Se você não tiver certeza, continue para a próxima página.)

.play methods/methods-pointers-explained.go

* Métodos e indireção de ponteiros

Comparando os dois programas anteriores, você pode notar que
funções com um argumento de ponteiro deve ter um ponteiro:

	var v Vertex
	ScaleFunc(v, 5)  // Erro de compilação!
	ScaleFunc(&v, 5) // OK

enquanto que os métodos com receptores ponteiro assumem um valor ou um ponteiro como o receptor quando eles são chamados:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK


Para a instrução `v.Scale(5)` , embora `v` seja um valor e não um ponteiro,
o método com o receptor ponteiro é chamado automaticamente.
Ou seja, por conveniência, Go interpreta a declaração `v.Scale(5)` como `(&v).Scale(5)` uma vez que o método `Scale` tem um receptor de ponteiro.

.play methods/indirection.go

* Métodos e indireção de ponteiros (2)

A coisa equivalente acontece no sentido inverso.

Funções que recebem um argumento de valor devem ter um valor desse tipo específico:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Erro de compilação!

enquanto que os métodos com receptores de valor tomam um valor ou um ponteiro como o
receptor quando eles são chamados:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

Neste caso, o método que chama `p.Abs()` é interpretado como `(*p).Abs()`.

.play methods/indirection-values.go

* Escolhendo um valor ou ponteiro receptor

Há duas razões para usar um receptor de ponteiro.

O primeiro é para que o método possa modificar o valor que os seus pontos de receptor referenciam.

A segunda é para evitar copiar o valor de cada chamada de método.
Isto pode ser mais eficaz se o receptor for uma estrutura grande, por exemplo.

Neste exemplo, tanto `Scale` e `Abs` estão com tipo de receptor `*Vertex`,
mesmo que o método `Abs` não precise modificar seu receptor.

Em geral, todos os métodos em um determinado tipo devem ter o valor ou ponteiro
receptores, mas não uma mistura de ambos.
(Vamos ver porque nas próximas páginas).

.play methods/methods-with-pointer-receivers.go

* Interfaces

Um tipo de interface é definida por um conjunto de métodos.

Um valor de tipo de interface pode conter qualquer valor que implementa esses métodos.

*Nota:* Tem um erro no exemplo na linha 22.
`Vertex` (do tipo valor) não satisfaz `Abser` porque
o método `Abs` é definido apenas em `*Vertex` (do tipo ponteiro)

.play methods/interfaces.go

* Interfaces são implementadas implicitamente

Um tipo implementa uma interface através da implementação dos métodos.
Não há declaração explícita de intenções, não há palavra-chave "implements".

Interfaces implícitas dissociam-se  da definição de uma interface de sua implementação,  que pode então aparecer em qualquer pacote sem pré-arranjamento.

.play methods/interfaces-are-satisfied-implicitly.go

* Valores de Interface

Por dentro, os valores de interface podem ser pensados como uma tupla de um valor de um 
tipo concreto:

	(valor, tipo)

Um valor de uma interface contém um valor de um tipo concreto subjacente específico.

Chamando um método em um valor de interface executa o método do mesmo nome no
seu tipo subjacente.

.play methods/interface-values.go

* Valores de interface com valores subjacentes nulos

Se o valor concreto no interior da própria interface é nulo,
o método será chamado com um receptor nulo.

Em algumas linguagens isso iria desencadear uma exceção de ponteiro nulo,
mas em Go é comum para escrever métodos que normalmente lidam sendo chamado
com um receptor nil (como acontece com o método `M` neste exemplo).

Nota-se que um valor de interface que contém um valor nulo concreto é por si não-nulo.

.play methods/interface-values-with-nil.go

* Valores de interface nulos 

Um valor de interface nil detém nem o valor nem tipo concreto.

Chamar um método em uma interface nil resulta em um erro de tempo de execução porque não há
um tipo dentro da tupla de interface para indicar qual o _método_concreto_ a chamar.

.play methods/nil-interface-values.go

* A interface vazia

O tipo de interface que especifica zero métodos é conhecido como  _interface_vazia_:

	interface{}

Uma interface vazia pode conter valores de qualquer tipo.
(Cada tipo implementa pelo menos de zero métodos.)

Interfaces vazias são usadas pelo código que lida com valores de tipo desconhecido.
Por exemplo, `fmt.Print` leva qualquer número de argumentos do tipo `interface{}`.

.play methods/empty-interface.go

* Type assertion

A _type_assertion_ fornece acesso ao valor concreto subjacente de um valor de interface.

	t := i.(T)

Esta declaração afirma que o valor de interface `i` detém o tipo concreto `T`
e atribui o valor de `T` subjacente à variável `t`.

Se `i` não detém uma `T`, a declaração irá desencadear um erro pânico.

Para _testar_ se um valor de interface possui um tipo específico,
uma _type assertion_ pode retornar dois valores: o valor subjacente
e um valor booleano que informa se a afirmação é correta.

	t, ok := i.(T)

Se `i` detém `T`, então `t` será o valor subjacente e `ok` será _true_.

Se não, `ok` será falso e `t` será o valor zero do tipo `T`,
e sem ocorrer erro pânico.

Note a semelhança entre esta sintaxe e  da leitura de um map.

.play methods/type-assertions.go

* Type Switch

Um _type_switch_ é uma construção que permite diversas _type_assertions_ em série.

Um _type_switch_ é como uma instrução `switch` regular, mas os _cases_ em um _type_switch_ especificam os tipos (e não valores), e esses valores são comparados com
o tipo dos valores determinados da interface informada.

	switch v := i.(type) {
	case T:
		// aqui v tem o tipo T
	case S:
		// aqui v tem o tipo S
	default:
		// sem correspondênte; aqui V tem o mesmo tipo I
	}

A declaração em um _type switch_ tem a mesma sintaxe como uma afirmação de tipo de `i.(T)`,
mas o tipo específico `t` é substituído com a palavra-chave `type`.

Nisso a instrução switch testa se o valor de interface `i`
detém um valor de tipo `T` ou `S`.
Em cada um dos casos `T` e `S`, a variável `v` será do tipo
`T` ou `S` respectivamente e guarda o valor mantido por `i`.
No _case_ `default` (onde não houver correspondência), a variável `v` é
do mesmo tipo e valor da interface `i`.

.play methods/type-switches.go

* Stringers

Uma das interfaces mais ubíqua é a [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] definida pelo pacote [[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

A `Stringer` é um tipo que pode descrever-se como uma `string`. O pacote `fmt`
(e muitos outros) olham para essa interface para mostrar valores.

.play methods/stringer.go

* Exercício: Stringers

Faça o tipo `IPAddr` implementar `fmt.Stringer` para mostrar o endereço como
um quadrângulo pontilhado.

Por exemplo, `IPAddr{1,`2,`3,`4}` deve ser mostrado como `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Erros

Programas Go expressam estados de erro com valores `error`.

O tipo `error` é uma interface embutida similar a `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Tal como acontece com `fmt.Stringer`, o pacote `fmt` procura a interface  de `error` quando
mostra valores.)

Funções frequentemente retornam um valor `error` e a chamada do código deve lidar com erros
testando se o erro é igual a `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("Não conseguiu converter número: %v\n", err)
	}
	fmt.Println("Inteiro convertido:", i)

Um `error` nil indica sucesso; um `error` não-nil indica fracasso.

.play methods/errors.go

* Exercício: Erros

Copie a sua função `Sqrt` dos [[/flowcontrol/8][exercícios anteriores]] e modifique-a para retornar um valor de `error`.

`Sqrt` deve retornar um valor de erro não-nil quando recebe um número negativo, pois não suporta números complexos.

Crie um novo tipo

	type ErrNegativeSqrt float64

e faça-o dar `error`, dando-lhe um

	func (e ErrNegativeSqrt) Error() string

tal método que `ErrNegativeSqrt(-2).Error()` retorne `"cannot`Sqrt`negative`number:`-2"`.

*Nota:* uma chamada para `fmt.Print(e)` dentro do método `Error` irá enviar o programa em um laço infinito. Você pode
evitar isso através da conversão `e` em primeiro lugar: `fmt.Print(float64(e))`. Por quê?

Mude sua função `Sqrt` para retornar um valor `ErrNegativeSqrt` quando receber um número negativo.

.play methods/exercise-errors.go

* Leitores

O pacote `io` especifica a interface `io.Reader`,
que representa o fim da leitura de um fluxo de dados.

A biblioteca padrão contém [[http://golang.org/search?q=Read#Global][várias implementações]] destas interfaces, incluindo arquivos, conexões de rede, compressores, cifras e outros.

A interface `io.Reader` tem um método `Read`:

  func (T) Read(b []byte) (n int, err error)

`Read` popula uma _slice_ de bytes passados com dados e retorna o número de bytes
populados e um valor de erro. Este retorna um erro `io.EOF` quando o fluxo termina.

O exemplo de código cria um
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]].
e consome sua saída 8 bytes cade vez.

.play methods/reader.go

* Exercício: Leitores

Implemente um tipo `Reader` que emita um fluxo infinito do carácter ASCII
`'A'`.

.play methods/exercise-reader.go

* Exercício: Leitor Rot13

Um padrão comum é um [[http://golang.org/pkg/io/#Reader][io.Reader]] que envolve outro `io.Reader`, modificando o fluxo de alguma forma.

Por exemplo, a função [[http://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] recebe um `io.Reader` (um fluxo de dados compactado) e retorna um `*gzip.Reader` que também implementa `io.Reader` (um fluxo de dados descomprimidos).

Implemente um `rot13Reader` que implementa um `io.Reader` que leia a partir de um  `io.Reader` , modificando o fluxo através da aplicação da cifra [[https://pt.wikipedia.org/wiki/ROT13][rot13]] de substituição para todos os caracteres alfabéticos.

O tipo `rot13Reader` é fornecido para você. Torne-o em um `io.Reader` através da implementação de seu método `Read`.

.play methods/exercise-rot-reader.go

* Imagens

O [[http://golang.org/pkg/image/#Image][package image]] define a interface `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Nota*: o `Rectangle` retorna valores do método `Bounds` que na realidade é um 
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], como na
declaração está dentro do pacote `image`.

(Veja [[http://golang.org/pkg/image/#Image][a documentação]] para todos os detalhes)

Os tipos `color.Color` e `color.Model` são interfaces também, mas nós vamos ignorar isso usando implementações pré-definidas `color.RGBA` e `color.RGBAModel`. Essas interfaces e tipo são especificados pelo [[https://golang.org/pkg/image/color/][pacote image/color]]

.play methods/images.go

* Exercício: Imagens

Lembra do gerador de imagem que você escreveu anteriormente? Vamos escrever outro, mas desta vez ele irá retornar uma implementação de `image.Image` em vez de uma slice de dados.

Defina seu próprio tipo `Image`, implemente [[http://golang.org/pkg/image/#Image][os métodos necessários]], e chame `pic.ShowImage`.

`Bounds` deve retornar um `image.Rectangle`, como `image.Rect(0,`0,`w,`h)`.

`ColorModel` deve retornar `color.RGBAModel`.

`At` deve retornar uma cor; o valor `v` no último gerador de imagem corresponde a `color.RGBA{v,`v,`255,`255}` neste.

.play methods/exercise-images.go

* Parabéns!

Você terminou esta lição!

Você pode voltar para lista de [[/list][módulos]] para achar o que aprender em seguida, ou continuar com a [[javascript:click('.next-page')][próxima lição]].
